extends ./template/base.pugtemplate
block meta
    - title = 'card'
block body 
    h1 card
    p stream <a href="https://twitch.tv/TheJonyMyster">jonymyster</a>
    .hlist
        .vlist
            .hlist
                .spacer
                .card-wrapper
                    #card
                .spacer
            .hlist.buttons
                .spacer
                button(onclick="reset()") reset
                button(onclick="dot()") +
                button(onclick="double()") *
                button(onclick="row()") /
                .spacer
            .spacer
        .vlist.dex-wrapper
            .hlist.dex-title
                p Discovered:
                button(onclick="clearDex()") Clear
            #dex.vlist
            .hlist.dex-manual
                input#dex-input(placeholder="code...")
                button(onclick="set(e('dex-input').value)") Go
            .spacer
block postbody
    style.
        :root {
            --ch: min(25vw * 3.5 / 2.25, 50vh, 600px);
            --pip: calc(var(--ch) / 6.5);
        }
        .card-wrapper {
            width: calc(var(--ch) * 2.25 / 3.5);
            height: var(--ch);
            background-color: white;
            border-radius: calc(var(--ch) / 40);
            padding: calc(var(--ch) * 33 / 171);
            margin-top: 16px;
        }
        #card { height: 100%; }
        .buttons button { margin: 8px; }
        .dex-wrapper > .hlist, #dex > * { border: 1px solid gray; padding: 4px; }
        .dex-title { border-radius: 8px 8px 0 0; background-color: color-mix(in srgb, var(--text) 40%, transparent); }
        .dex-manual { border-radius: 0 0 8px 8px; }
        .pip { 
            color: transparent;
            width: var(--pip);
            height: var(--pip);
            transform: translate(calc(var(--pip) / -2), calc(var(--pip) / -2));
            border-radius: 50%; background: black;
            position: absolute; display: block;
            margin: auto;
        }
    script.
        const PRESETS = {
            "0": "",
            "1": "+",
            "2": "+/",
            "3": "+//",
            "4": "+/*",
            "5": "+/*+",
            "6": "+//*",
            "7": "+//*+",
            "8": "+/*+/",
            "9": "+///*+",
            "10": "+//*+/",
        }
        let current = "";
        let rows = [];
        addEvent("onload", init);
        function init() {
            onEnter("dex-input", () => set(e('dex-input').value));
            let z = localStorage.getItem("dex");
            if (z) z.split(",").map(x => checkDex(x));
        }
        function reset() {
            current = "";
            rows = [];
            render(); checkDex(current);
        }
        function set(str) {
            if (PRESETS[str]) str = PRESETS[str];
            reset();
            str.split("").map(x => {
                switch (x) {
                    case "+": dot(); break;
                    case "*": double(); break;
                    case "/": row(); break;
                }
            });
        }
        function dot() {
            let r = rows.length / 2;
            if (r % 1 !== 0) return;
            current += "+";
            rows.splice(r, 0, 1);
            render(); checkDex(current);
        }
        function double() {
            if (rows.length === 0) return;
            current += "*";
            for (let n of [...rows].reverse()) rows.push(n);
            render(); checkDex(current);
        }
        function row() {
            if (rows.length === 0) return;
            current += "/";
            rows = rows.map(x => x + 1);
            render(); checkDex(current);
        }
        function render() {
            removeAllChildren("card");
            let h = Math.max(...rows);
            let hs = [...rows];
            for (let i = 0; i < hs.length / 2; i++) {
                hs[i] = h - (i % 2);
                hs[hs.length - 1 - i] = h - (i % 2);
            }
            let pips = [...rows].map(x => []);
            for (let i = 0; i < rows.length; i++) {
                if (rows[i] === 0) continue;
                else if ((hs[i] === 0 || hs[i] % 2 === 1) && rows[i] === 1) pips[i].push(0.5);
                else if (hs[i] === h || rows[i] > hs[i]) 
                    for (let j = 0; j < rows[i]; j++) pips[i].push(j / (rows[i] - 1));
                else {
                    let cells = [];
                    if (rows[i] % 2 === 1) cells.push(Math.floor(hs[i] / 2 - 0.5));
                    for (let k = 0; k < Math.floor(rows[i] / 2); k++) 
                        { cells.push(k); cells.push(hs[i] - k - 1); }
                    for (let k = 0; k < cells.length; k++) 
                        pips[i].push((cells[k] + 0.5) / hs[i]);
                }
            }
            let pos = [];
            for (let i = 0; i < pips.length; i++) {
                let x = i / (pips.length - 1);
                if (pips.length === 1) x = 0.5;
                pips[i].map(y => pos.push({x: x, y: y}));
            }
            pos.map(c => insertElement("i", "card", "pip").with("style", `left: ${c.x * 100}%; top: ${c.y * 100}%;`));
        }
        let dex = [];
        function checkDex(str) {
            if (dex.includes(str)) return;
            dex.push(str);
            let g = insertElement("div", "dex", "hlist");
            insertElement("p", g, null, Object.keys(PRESETS).find(x => PRESETS[x] === str) ?? str);
            insertElement("button", g, null, "Set").with("onclick", `set('${str}')`);
            localStorage.setItem("dex", dex.join(","));
        }
        function clearDex() {
            removeAllChildren("dex");
            dex = [];
            localStorage.setItem("dex", dex.join(","));
        }