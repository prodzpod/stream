extends ../template/base.pugtemplate

block meta
    - v = true
    - title = 'www.:3schools.com'
    - description = 'The Documents'
block body 
    h1 www.:3schools.com
    p blessscript docs
    h2 what is blessscript
    p blessscript is a language that was made on stream to be used as a redeem. you can run any program using the <em>!bs</em> command.
    p it is a weird mix of mostly javascript but some elements from python and lisp is also included. the name and inspiration comes from <a href="https://pub.colonq.computer/~prod/toy/blessdocs/">Bless</a>, a shelved project from @LCOLONQ zone that was a riff on FORTH language.
    h2 data types
    p <em>Number</em>: is stored as js number, either a number or (+/-)Infinity.
    p <em>String</em>: is stored as js string, in quotation marks ("", NOT '')
    p <em>Bool</em>: is stored as js bool, either <em>true</em> or <em>false</em>
    p <em>Null</em>: indicates various undefined values. <em>null</em>.
    p <em>List</em>: much like js list, variable length, variable data type. constructed by wrapping a comma separated list of elements in <em>[]</em>.
    p <em>Dict</em>: a string key: any value pair that is like js objects, but more strict in construction. (much like json, construct like <em>{"a": 2, "b": "c", "c": [1,2,3]}</em>).
    p <em>Function</em>: unlike js, there is no <em>function</em> keyword and instead all functions are lambda generated by the <em>=&gt;</em> keyword.
    h2 Basic Operation
    p this is the kind of stuff that exists in other languages
    p <em>Arithmetic</em>: math can be done using <em>+</em>, <em>-</em>, <em>*</em> and <em>/</em>. <em>%</em> for modulo, <em>**</em> for exponentiation. 
    p Division without remainder can be done using <em>//</em>.
    p <em>Bitwise operation</em>: <em>&</em>, <em>|</em>, <em>^</em>, <em>&lt;&lt;</em> and <em>&gt;&gt;</em> is available.
    p <em>Concatenation</em>: strings can be added together with <em>+</em>, and repeated using <em>*</em>.
    p <em>List append/extend</em>: elements can be appended to list with <em>List + Any</em>, and lists can be joined together with <em>List | List</em>.
    p <em>List inclusion</em>: <em>Any in List</em> can be used to check if an element is inside of a list.
    p <em>List intersection</em>: <em>List & List</em> or <em>List ^ List</em> can be used to return an intersection or an "xor" of a list. <em>List - Any</em> also exists to return a list without that element.
    p <em>List access</em>: <em>List[Number]</em> and <em>Dict[String]</em> can be used to retrieve a single element, <em>String[Number]</em> can be used to return a string with 1 letter, <em>List[Number(start):Number(end):Number(step)]</em> exists to slice a list python style.
    p <em>List ?????</em>: <em>List &lt;&lt; Number</em> and <em>List &gt;&gt; Number</em> can be used to shift the list Number times, and <em>List % Number</em> can be used to return the Nth element in the list.
    p <em>String split/join</em>: <em>String / String</em> can be used to split a string into list, and <em>List * String(delimiter)</em> can be used to join list into string.
    p <em>Type Checking</em>: <em>typeof Any</em> can be used to return a string with the type name, and <em>Any is String(type name)</em> can be used to check if something is of that type.
    p <em>Type Coersion</em>: <em>bool Any</em>, <em>number Any</em>, <em>string Any</em>, <em>list Any</em>, <em>dict Any</em> can be used to coerce one type to another. when dict becomes a list, it behaves like Object.entries(), when list or dict becomes a string or vice versa, it acts like WASD. falsey values include <em>null, false, 0, "", [], {}</em>. functions cannot be coerced into anything other than string.
    p <em>Boolean Operation</em>: <em>&&</em> and <em>||</em> exists for AND and OR. <em>!</em> exists for not (that also coerces into bool).
    p <em>Comparison</em>: <em>&lt;</em>, <em>&gt;</em>, <em>&lt;=</em>, <em>&gt;=</em>, <em>==</em>, <em>!=</em> exists to compare. null is treated as [] or 0, numbers are compared, lists are compared from first element to last, strings are compared with a special function that sorts "more smartly" than the usual lexical sort. (such that "16" &gt; "8")
    p <em>Comment</em>: <em>/* ... */</em> can be used to comment.
    h2 Variables and Functions
    p variables can be declared without any special keyword (python style), where the first appearance of that variable will determine a scope.
    p variables from higher scope can be accessed, but variables in lower scope will be destroyed when that scope is exited (by return and whatnot).
    p all arithmetic operations can be appended with <em>=</em> to do assignment at the same time (<em>x += 1; x &&= 4; x **= 2;</em>).
    p functions can be assigned to variables like <em>x = a =&gt; 1 + a;</em> or <em>x = a =&gt; b =&gt; a + b;</em> and called later such as <em>x(1)</em>.
    h2 Flow Control
    p <em>Nullish Operation</em>: <em>Any ?? Any</em> can be used js style. can also be used as <em>x ??= Any</em>.
    p <em>Ternary Operation</em>: <em>Condition ? IfTrue : IfFalse</em>.
    p <em>if statement</em>: <em>if (condition) statement;</em> or <em>if (condition) { statements ... }</em> optionally followed by <em>else statement;</em>, <em>else { statements... }</em> or <em>else (another if statement...)</em>.
    p <em>while loop</em>: <em>while (conditon) statement;</em> or <em>while (condition) { statements... }</em>.
    p <em>for loop</em>: <em>for (initial;conditon;increment) statement;</em> or <em>for (initial;conditon;increment) { statements... }</em>. these are like the same syntax as many other languages
    p <em>continue</em>, <em>break</em> and <em>return</em> / <em>return Any;</em> is supported.
    h2 "Gizmos"
    p this is kind of the reason why bless script exists
    p <em>call String</em> or <em>call List</em>: calls a command or chat in your behalf. commands usually do not reply but you can make it reply by putting "<em>!!</em>" in front of your queries. (so that <em>call "!!guy"</em> would announce <em>it worked</em> on chat)
    p call is equivalent to typing the exact same thing in chat, and must start with "!" to execute commands.
    p <em>query String(url) Dict(query)</em>: queries this website and returns its output. if string contains a slash, it queries <em>prod.kr/${url}?${query}</em>, if it does not, it queries <em>prod.kr/api/${url}?${query}</em> so that <em>query "chat" {"count": 1}</em> would return the most recent chat message. 
    p <em>Fuel system</em> to avoid spamming the chat or overloading the stream, each bs call has an initial "fuel value" of <em>5000</em>. this value can be increased by 1 per 1 millisecond of <em>sleep Number(seconds)</em> called. each <em>call</em> or <em>query</em> costs 1000 fuel, and each nested blessscript evaluation (through function calls, for and while loops, brackets, etc) costs 1 fuel per evaluation.
    h2 ffi
    p there are a few functions and constants that are defined in the topmost variable scope to begin with to aid in making programs.
    p <em>map(List, Function(current, index, array) =&gt; Any)</em>: calls js Array.map
    p <em>filter(List, Function(current, index, array) =&gt; Bool)</em>: calls js Array.filter
    p <em>reduce(List, Function(previous, current, index, array) =&gt; Any, previous=null)</em>: calls js Array.reduce
    p <em>abs(Number)</em> and <em>sign(Number)</em>: returns the absolute value and sign of the number.
    p <em>sin(Number)</em>, <em>cos(Number)</em>, <em>tan(Number)</em>, <em>atan2(Number(y), Number(x))</em>: trigonometry functions. calls js Math
    p <em>log(Number, Number(base)=E)</em>: gets the log of a number.
    p <em>PI, E</em>: math constants.
    p <em>floor(Number)</em>, <em>ceil(Number)</em>, <em>trunc(Number)</em>, <em>round(Number)</em>, <em>prec(Number, Number(digits)=6)</em>: rounds a number.
    p <em>sqrt(Number)</em>: square root, equivalent to <em>Number ** 0.5</em>
    p <em>toUpperCase(String)</em>, <em>toLowerCase(String)</em>, <em>trim(String)</em>: string operations, calls js String.trim() and whatnot.
    p <em>time()</em>: calls the current seconds since 2025/01/01 (cannot do unix time bc js float and were not bigint)
    p <em>random()</em>: calls random.
    p: ul
        li: p random without any argument returns a float from 0 to 1.
        li: p random with 1 argument(x) returns a float from 0 to x.
        li: p random with 2 arguments(x, y) return a float from x to y.
        li: p random with a list as an argument(x) returns a random element of x.
        li: p random with a dict as an argument with number as its values, returns a random key of that dict treating the values as weights in a weighted list.
    h2 using blessscript for guys
    p you can go to <a href="https://prod.kr/v/brain">!brain</a> and submit a hook that is written in blessscript. these hooks will run whenever a specific command, ipc, or chat message have been sent.
    p a specific type of hook under "guy" is ran and its result parsed for the ai of the guys, allowing for people to program their own guy ai. you can also steal brain for other people by clicking one of the 3 randomly selected users' brains of the same hook below.
    p more on the argument and return type of each hooks in the following sections.
    h2 !guy ai hooks
    p <em>idle</em> hook is fired every time a guys action finishes. where a new action shall be given as a return value of this hook.
    p other hooks, such as <em>attacked</em>, <em>peaced</em> and <em>listen</em> acts as an interrupt to the idle hook, firing irrespective of the completion of the current task.
    p a set of top level arguments are passed that are relevant to your guy.
    ul
        li: p <em>position</em>: [Number(x), Number(y)], current pixel position of the guy.
        li: p <em>speed</em>: [Number(x), Number(y)], current pixel speed of the guy.
        li: p <em>angle</em>: Number, current angle in degrees.
        li: p <em>rotation</em>: Number, current angluar momentum in degrees.
        li: p <em>grounded</em>: Bool, whether the guy is currently on ground.
        li: p <em>hp</em>: Number, current hp value.
        li: p <em>maxhp</em>: Number, current maxhp value.
        li: p <em>attack</em>: Number, current attack value.
        li: p <em>critchance</em>: Number, current critical chance value.
        li: p <em>previousmovement</em>: String, name of the last guy hook fired.
        li: p <em>incombat</em>: Bool, whether the guy has any hostile creatures.
        li: p <em>hostilenearme</em>: Number, number of hostile creatures in the hitbox.
        li: p <em>nearesthostile</em>: [Number(x), Number(y)] ?? null, position of the nearest hostile creature.
        li: p <em>guynearme</em>: Number, number of creatures in the hitbox.
        li: p <em>nearestguy</em>: [Number(x), Number(y)] ?? null, position of the nearest other guy.
        li: p <em>windownearme</em>: Number, number of windows in the hitbox.
        li: p <em>nearestwindow</em>: [Number(x), Number(y)] ?? null, position of the nearest window.
        li: p <em>ai</em>: Dict, your guy's current ai.
        li: p <em>memory</em>: String, a maximum 2000 character string that carries over between hook calls if assigned. if non-string is passed, it gets stringified.
    p in <em>attacked</em> hook, <em>damage</em> for recent damage taken will be given also.
    p for <em>idle</em> hook, a return value must be given, otherwise your guy will <em>idle 1000</em>. return value is either a list or a space delimited string. 
    ul
        li: p <em>idle Number(milliseconds)</em>: does nothing, and calls <em>idle</em> hook again after a delay.
        li: p <em>move Number(pixel)</em>: move towards this x position. when arrived, calls idle again.
        li: p <em>jump Number(x) Number(y)</em>: jump towards this position. when landing, calls idle again.
        li: p <em>kick Number(x) Number(y)</em>: kick any window towards this position, and calls idle immediately.
        li: p <em>war</em>: declares war on every guy around you, and calls idle immediately.
        li: p <em>peace</em>: attempt to declare peace on all your enemies, and calls idle immediately.
        li: p <em>attack</em>: do a melee attack, and wait for time dependent on your attack speed.
        li: p <em>chat String</em>: summon a chat bubble that causes everyone to <em>listen</em>. then calls idle again.
    p for an example, see the Default guy idle hook.
    h2 non-guy hooks
    p hooks can be applied to any execution within the stream gizmo, and return values are not required for this one, you may use <em>call</em> function to influence on hook.
    p <em>chat starts with</em> and <em>chat includes</em> are called when a normal chat message (NOT commands) starts with or includes a specified word or a phrase.
    p <em>command called</em> hooks are called when a specified command is called. the event name must be based on its <em>js file name</em> instead of the phrase you use to execute the command. (for example, !guy would be <em>spawnShimeji</em>.)
    p both chat and command hooks share the same list of following arguments.
    ul
        li <em>from</em>: String, where the message came from ("twitch", "discord", "web", etc)
        li <em>chatter</em>: Dict, the author of this message (user info)
        li <em>message</em>: Dict, metadata for this message (message id for twitch and discord, the channel this message came from for twitch, etc)
        li <em>text</em>: String, the full text of the message.
        li <em>emote</em>: List, list of emotes that are used.
        li <em>reply</em>: Dict ?? Null, if the message is a reply to someone else, the message metadata of the replied message.
    p <em>ipc calls</em> are the most direct form of execution, and the event name is similar to reload names (<em>such as "twitch raid"</em>). this is dependent on the file structure within <em>src/@main/command</em>, and is executed whenever those are. check the github for detail on directory layout.
    p only <em>args</em> argument is passed for ipc call hook, which is a list of arguments that is being called.
block postbody
    style.
        li { margin-left: 32px; display: block; }