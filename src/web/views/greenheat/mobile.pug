doctype html
head
    title hii
    link(href='https://prod.kr/css/reset.css' rel='stylesheet')
    link(href='https://prod.kr/css/base.css' rel='stylesheet')
    script(src="https://extension-files.twitch.tv/helper/v1/twitch-ext.min.js")
    script(src="https://prod.kr/js/common_manual.js")
    script(src="https://prod.kr/js/base.js")
body
    #heat.layer
    #overlay.layer(style='pointer-events: none;')
        p#debug    
        #login.layer.vlist(style='pointer-events: all;')
            p
                b
                    | this channel runs 
                    span(style='color: lime;') GreenHeat
            .spacer
            p
                | You can touch on this screen to interact with the stream. However, the streamer will not know which clicks are yours unless you link your account with the button below. The extension will not collect your data.
            .spacer
            .hlist
                button.spacer#link-account(style='background-color: white; color: black;') link account
                div(style='margin: 4px;')
                button.spacer#stay-anonymous(style='background-color: #444; color: white;') stay anonymous
    style.
        :root { --color: red; }
        .layer {
            position: absolute;
            width: 100%;
            height: 100%;
        }
        #heat.active { cursor: pointer; }
        @keyframes clickdot-expand {
            from {
                width: 0px;
                height: 0px;
                opacity: 1;
                transform: translate(0px, 0px);
            }
            to {
                width: 64px;
                height: 64px;
                opacity: 0;
                transform: translate(-32px, -32px);
            }
        }
        @keyframes hoverdot-expand {
            from { border-width: 4px; opacity: 0.5; }
            to { border-width: 0px; opacity: 0; }
        }
        .clickdot {
            position: absolute;
            animation: clickdot-expand ease-out forwards 0.5s;
            border-radius: 50%;
            border: 4px solid var(--color);
        }
        .clickdot.hover, .clickdot.drag { animation: hoverdot-expand ease-out forwards 0.5s; }
        .clickdot.release, .clickdot.hover { border: 4px solid gray; }
        #login {
            background-color: rgba(0, 0, 0, 0.8);
            text-align: center;
            color: white;
            line-height: 1.15;
            padding: 16px;
            border-radius: 8px;
            font-family: 'roobert', sans-serif;
            margin-right: 8px;
        }
        #login p { margin-bottom: 16px; }
        #login b, #login button { font-weight: 700; }
        #login button {
            padding: 4px;
            border-radius: 4px;
        }
        #login button::after {
            content: " ";
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
        }
        #login button:hover::after { background-color: rgba(128, 128, 128, 0.2); }
        #login button:active::after { background-color: rgba(128, 128, 128, 0.5); }
    script.
        const DEBUG = false;
        let channel, login, user, ws, config;
        window.Twitch.ext.onAuthorized(auth => {
            channel = auth.channelId;
            user = Twitch.ext.viewer?.id ?? auth.userId;
            if (!initialized) init();
            if (!user.startsWith("U") && !user.startsWith("A")) removeElement("login");
        });
        let latency = 0;
        window.Twitch.ext.onContext(ctx => {
            latency = ctx.hlsLatencyBroadcaster;
        });
        let initialized = false;
        async function init() {
            initialized = true;
            e("login").addEventListener("touchstart", event => event.stopPropagation());
            e("login").addEventListener("touchend", event => event.stopPropagation());
            e("login").addEventListener("touchmove", event => event.stopPropagation());
            e("link-account").addEventListener("touchend", _ => window.Twitch.ext.actions.requestIdShare());
            e("stay-anonymous").addEventListener("touchend", _ => removeElement('login'));
            login = (await (await fetch("https://prod.kr/api/twitchloginfromid?id=" + channel)).json()).res;
            initWS();
            config = await (await fetch("https://heat.prod.kr/" + channel + "/config")).json()
            if (!config.detections.includes("mobile")) return;
            e("heat").classList.add("active");
            if (config.detections.includes("click")) e("heat").addEventListener("touchstart", event => clickScreen(event));
            if (config.detections.includes("release")) e("heat").addEventListener("touchend", event => releaseScreen(event));
            if (config.detections.includes("drag")) e("heat").addEventListener("touchmove", event => hoverScreen(event));
            setCSS("color", config.color ?? "red");
        };
        function initWS() {
            console.log("[GreenHeat] logged in to", "wss://heat.prod.kr/" + login + "/extension", "!");
            ws = new WebSocket("wss://heat.prod.kr/" + login + "/extension");
            ws.onclose = () => {
                console.log("Websocket Disconnected, reconnecting...");
                setTimeout(initWS, 5000);
            }
        }

        function getData(event) {
            let ratio = (1920 / e("heat").clientWidth) / (1080 / e("heat").clientHeight);
            let x = event.changedTouches[0].pageX / e("heat").clientWidth;
            let y = event.changedTouches[0].pageY / e("heat").clientHeight;
            if (ratio < 1) x /= ratio;
            else y /= ratio;
            return {
                id: user,
                x: x,
                y: y,
                button: "left",
                shift: event.shiftKey,
                ctrl: event.ctrlKey,
                alt: event.altKey,
                time: new Date().getTime(),
                latency: latency
            };
        }
        let pressed = false,
            lastCoord = null;

        function clickScreen(event) {
            let data = getData(event);
            pressed = true;
            lastCoord = [data.x, data.y];
            data.type = "click";
            ws.send(data);
            let dot = insertElement("div", "overlay", "clickdot").with("style", `left: ${event.changedTouches[0].pageX}px; top: ${event.changedTouches[0].pageY}px;`);
            setTimeout(() => { removeElement(dot); }, 500);
        }

        function releaseScreen(event) {
            let data = getData(event);
            pressed = false;
            lastCoord = [data.x, data.y];
            data.type = "release";
            ws.send(data);
            let dot = insertElement("div", "overlay", "clickdot release").with("style", `left: ${event.changedTouches[0].pageX}px; top: ${event.changedTouches[0].pageY}px;`);
            setTimeout(() => { removeElement(dot); }, 500);
        }

        function hoverScreen(event) {
            let data = getData(event);
            if (!lastCoord) lastCoord = [data.x, data.y];
            let coord = [data.x, data.y];
            if (Math.hypot((coord[0] - lastCoord[0]) * 1920, (coord[1] - lastCoord[1]) * 1080) >= config.sensitivity[1]) {
                lastCoord = coord;
                data.type = "drag";
                ws.send(data);
                let dot = insertElement("div", "overlay", "clickdot drag").with("style", `left: ${event.changedTouches[0].pageX}px; top: ${event.changedTouches[0].pageY}px;`);
                setTimeout(() => { removeElement(dot); }, 500);
            }
        }

        function send(data) {
            if (DEBUG) e("debug").innerText = "sending " + JSON.stringify(data);
            ws.send(JSON.stringify(data));
        }