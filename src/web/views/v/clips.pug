extends ../template/base.pugtemplate

block meta
    - v = true
    - title = 'get clips'
    - description = 'screw you twitch korea'
block body 
    h1 ClipMaster 3000
    p Screw you Twitch Korea
    h2 Hi chat!!
    p The reason why we need this page is because you <em>cannot see clips or vods in Twitch if you have a korean IP</em>.
    p no, really. <a href="//twitch.tv/prodzpod">see for yourself</a>.
    p: c also yes i am korea, it is called prod dot kr like the website, like its a cc tld<br><br>
    p Korea is a cyberpunk nightmare where Net Neutrality doesn't exist and it costs twitch like 20x more to stream to korea compared to other places, thanks to the oligopoly of like 3 huge ISP companies.
    p In response, twitch has <a href="//blog.twitch.tv/en/2023/12/05/an-update-on-twitch-in-korea/">shut down</a> business in korea, meaning we get <em>no vods, no clips, no resolution better than 720p and no chance at affiliate</em>. no affiliate also means <em>no emote, no channel point, no prediction or polls, no subs, etc.</em> this does also mean no ads for me which is neat i guess.<br><br>
    p for the longest time, we have not been able to see or make anyone's (even my own) clips or even know what game people who raid me were doing before. we have been slowly fighting this by <em>hacking the planet</em>.
    p to counter the clip issue, we have leveraged the power of <a href="https://pub.colonq.computer/~prod/cgi-source/api.scm">the pubnix</a> and <a href="">gambit scheme</a> to fetch and download clips that are sent directly into this pc. its actually an insane dance of signals going on here. 
    .hlist.hard(style="margin: 8px;")
        .shoutout: a(href='//colonq.computer'): img(src='//prod.kr/images/v/progenitor.webp')
        p &lt;-- !so this guy
        .spacer
    p btw if ur not me and somehow stumbled onto this page its kinda useless for u lol
    p check out <a href="//prod.kr/live">the broadcast</a> and <a href="//prod.kr/v/screen">the screen</a> while ur here, or see me on <a href="//prod.kr/discord">the cord</a><br><br>
    p#login
    h2 Search a clip
    .hlist
        p from
        input.spacer(placeholder="channel name" id="search")
        input.spacer(type="number" placeholder="number of days to search" id="search-date")
        button(onclick="search(e('search').value)") go
    #clip-result
    .hlist#search-result
    h2 Make a clip
    .hlist
        p from
        input.spacer(placeholder="channel name" id="make")
        button(onclick="make(e('make').value)") go
    #make-result
block postbody 
    style.
        .clip {
            width: 240px;
            padding: 8px;
        }
        .thumb {
            width: 240px;
        }
        #clip-result iframe {
            width: calc(100vw - 128px);
            height: calc((100vw - 128px) / 16* 9);
        }
        .shoutout {
            max-width: 48px;
            padding: 4px;
            border-radius: 50%;
            border: 4px solid var(--text);
            line-height: 0;
        }
        .shoutout img { 
            width: 100%;
            border-radius: 50%;
        }
    script.
        addEvent("onload", () => {
            let url = "wss://prod.kr/clip";
            const hash = localStorage.getItem("clip");
            if (hash) url += `?hash=${hash}`;
            ws = new WebSocket(url);
            ws.addEventListener("open", () => {
                console.log("WebSocket opened");
            });
            ws.addEventListener("message", event => {
                const args = WASD.unpack(event.data);
                if (!COMMANDS[args[0]]) console.warn(args[0], "does not exist but recieved:", args);
                else COMMANDS[args[0]](...args.slice(1));
            });
        });
        let user = false;
        const COMMANDS = {
            register: (o) => {
                user = o;
                e('login').innerHTML = user.isProd ? "You're already prod!" : (user.login ? `to log in, type <u>!login ${o.login}</u>` : "");
            },
            login: (o, hash) => {
                user = o;
                localStorage.setItem("clip", hash);
                e('login').innerHTML = user.isProd ? "You're prod!" : (user.login ? `to log in, type <u>!login ${o.login}</u>` : "");
            },
            error: o => error(o),
            info: o => info(o),
            respond: (id, o) => {
                if (waitList[id]) { waitList[id](o); delete waitList[id]; }
            },
        }

        async function search(channel) {
            if (!user.isProd) { window.location.href = `https://www.twitch.tv/${channel}/clips?filter=clips&range=7d`; return; }
            removeAllChildren("clip-result");
            e("search-result").innerHTML = "<p>Searching...</p>";
            let res = await send("searchclip", channel, e("search-date").value);
            if (!res?.data) e("search-result").innerHTML = "<p>Something went wrong</p>";
            else if (!res.data.length) e("search-result").innerHTML = "<p>No Clips Detected!</p>";
            else {
                removeAllChildren("search-result");
                for (let clip of res.data.sort((a, b) => Number(BigMath.sign(time(b.created_at.replace("T", " ")) - time(a.created_at.replace("T", " "))))).slice(0, 10))
                    await addClip(clip, "search-result");
            }
        }

        async function make(channel) {
            if (!user.isProd) { alert("ur not prod (use the !makeclip command if youre making it on my channel)"); return; }
            e("make-result").innerHTML = "<p>Cooking...</p>";
            let clip = await send("makeclip", channel);
            removeAllChildren("make-result");
            await addClip(clip, "make-result");
        }

        async function downloadClip(url) {  
            if (!user.isProd) { alert("ur not prod"); return; }
            e("clip-result").innerHTML = "<p>Cooking...</p>";
            await send("dlclip", url);
            removeAllChildren("clip-result");
            insertElement("iframe", "clip-result").with("src", "//prod.kr/data/temp.mp4");
        }

        async function addClip(clip, el) {
            clip.thumbnail_url = await send("getthumb", clip.thumbnail_url);
            let c1 = insertElement("div", insertElement("a", el).with("onclick", `downloadClip("${clip.id}");`), "clip vlist");
            insertElement("div", c1, "spacer");
            insertElement("img", c1, "thumb").with("src", "data:image/jpg;base64," + clip.thumbnail_url);
            let c2 = insertElement("div", c1, "hlist");
            let c3 = insertElement("div", c2, "vlist").with("style", "width: 100%;");
            insertElement("div", c3, "spacer");
            insertElement("p", c3, null).innerText = clip.title;
            insertElement("c", c3, null, clip.creator_name);
            let c4 = insertElement("div", c2, "vlist");
            insertElement("div", c4, "spacer");
            insertElement("c", c4, null, formatTime(time(clip.duration * 1000), "mm:ss", false));
            insertElement("c", c4, null, formatDate(time(clip.created_at.replace("T", " ")), "YYYY/MM/DD"));
            insertElement("div", c2, "spacer");
        }

        let ID = 0, waitList = {};
        function send(...msg) {
            if (ws?.readyState !== 1) return new Promise(resolve => { resolve(undefined); }); ID++;
            ws.send(WASD.pack(ID, ...msg));
            return new Promise(resolve => waitList[ID] = resolve);
        }